function res = net_forward_pass(img, W, rois, ROIS_IS_GT)
%{
img: the image to be tested
W: the network weights and biases
rois: given rois in format Kx5;
%}
disp('net_forward_pass...');

% if rois is ground truth, then it is relative to size of original image
% if rois is generated by RPN, then it is relative to size of preprocessed
% image
%ROIS_IS_GT = false; 

% whether to use parfor (multi-cpu) to calculate fc layers for each roi
USE_PARFOR = false;

% make sure everything is in single format
img = single(img);
rois = single(rois);

% save rois to the result
res.rois = rois;

  
    % Preprocess image
    preprocessed_img = preprocess_img(img); 
    res.img = preprocessed_img;
    
    % network forward pass - conv
    res.conv1_1 = my_vl_conv_relu(preprocessed_img, W.conv1_1_weights, W.conv1_1_biases);
    res.conv1_2 = my_vl_conv_relu(res.conv1_1, W.conv1_2_weights, W.conv1_2_biases);
    res.pool1 = vl_nnpool(res.conv1_2, [2,2], 'stride', 2);
    
    res.conv2_1 = my_vl_conv_relu(res.pool1, W.conv2_1_weights, W.conv2_1_biases);
    res.conv2_2 = my_vl_conv_relu(res.conv2_1, W.conv2_2_weights, W.conv2_2_biases);
    res.pool2 = vl_nnpool(res.conv2_2, [2,2], 'stride', 2);
    
    res.conv3_1 = my_vl_conv_relu(res.pool2, W.conv3_1_weights, W.conv3_1_biases);
    res.conv3_2 = my_vl_conv_relu(res.conv3_1, W.conv3_2_weights, W.conv3_2_biases);
    res.conv3_3 = my_vl_conv_relu(res.conv3_2, W.conv3_3_weights, W.conv3_3_biases);
    res.pool3 = vl_nnpool(res.conv3_3, [2,2], 'stride', 2);
    
    res.conv4_1 = my_vl_conv_relu(res.pool3, W.conv4_1_weights, W.conv4_1_biases);
    res.conv4_2 = my_vl_conv_relu(res.conv4_1, W.conv4_2_weights, W.conv4_2_biases);
    res.conv4_3 = my_vl_conv_relu(res.conv4_2, W.conv4_3_weights, W.conv4_3_biases);
    res.pool4 = vl_nnpool(res.conv4_3, [2,2], 'stride', 2);
    
    res.conv5_1 = my_vl_conv_relu(res.pool4, W.conv5_1_weights, W.conv5_1_biases);
    res.conv5_2 = my_vl_conv_relu(res.conv5_1, W.conv5_2_weights, W.conv5_2_biases);
    res.conv5_3 = my_vl_conv_relu(res.conv5_2, W.conv5_3_weights, W.conv5_3_biases);
    
 
    % Convert rois to relative terms
    if ROIS_IS_GT
        im_size = size(img);
    else 
        im_size = size(preprocessed_img);
    end
    rois(:,[2,4]) = ceil(rois(:,[2,4])*size(res.conv5_3,2)/im_size(2));
    rois(:,[3,5]) = ceil(rois(:,[3,5])*size(res.conv5_3,1)/im_size(1));
    res.pool_5 = vl_nnroipool(res.conv5_3, rois', 'Method', 'max', 'Subdivisions',[7,7]);
 
    
    % fully connected layers forward pass
    if ~USE_PARFOR
        res.fc6 = zeros(size(rois, 1), size(W.fc6_weights, 2));
        res.fc7 = zeros(size(rois, 1), size(W.fc7_weights, 2));
        res.cls_score = zeros(size(rois, 1), size(W.cls_score_weights, 2));
        for roi_ind = 1:size(rois, 1)
            pooled = res.pool_5(:,:,:,roi_ind);
            pooled = flat_reshape(squeeze(pooled));

            fc_result = pooled * W.fc6_weights + W.fc6_biases;
            fc_result(fc_result < 0) = 0;
            res.fc6(roi_ind, :) = fc_result;

            fc_result = res.fc6(roi_ind, :) * W.fc7_weights + W.fc7_biases;
            fc_result(fc_result < 0) = 0;
            res.fc7(roi_ind, :) = fc_result;

            fc_result = res.fc7(roi_ind, :) * W.cls_score_weights + W.cls_score_biases;
            %fc_result(fc_result < 0) = 0;  (no relu for cls score)
            res.cls_score(roi_ind, :) = fc_result;
        end
        
    else
        res_pool_5 = res.pool_5;
        res_fc6 = zeros(size(rois, 1), size(W.fc6_weights, 2));
        res_fc7 = zeros(size(rois, 1), size(W.fc7_weights, 2));
        res_cls_score = zeros(size(rois, 1), size(W.cls_score_weights, 2));
        parfor roi_ind = 1:size(rois, 1)
            pooled = res_pool_5(:,:,:,roi_ind);
            pooled = flat_reshape(squeeze(pooled));

            fc_result = pooled * W.fc6_weights + W.fc6_biases;
            fc_result(fc_result < 0) = 0;
            res_fc6(roi_ind, :) = fc_result;

            fc_result = res_fc6(roi_ind, :) * W.fc7_weights + W.fc7_biases;
            fc_result(fc_result < 0) = 0;
            res_fc7(roi_ind, :) = fc_result;

            fc_result = res_fc7(roi_ind, :) * W.cls_score_weights + W.cls_score_biases;
            %fc_result(fc_result < 0) = 0;  (no relu for cls score)
            res_cls_score(roi_ind, :) = fc_result;

        end

        res.pool_5 = res_pool_5;
        res.fc6 = res_fc6;
        res.fc7 = res_fc7;
        res.cls_score = res_cls_score;
    end
 
end